// prisma data proxy shouldn't be needed with supabase pgbouncer
// if for some obscure reason it doesn't work right disable pgbouncer and setup data proxy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum PostCategory {
  RANA
  SIN_SONIDO
  MEME_ARTESANAL
  NO_SE_YO
  ORO
  DIAMANTE
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

// users display, login and id will be constantly updated since twitch's /validate endpoint
// must be called on startup and every hour. update only if diff to save up db and edge fn queries
model User {
  id           Int         @id @default(autoincrement())
  displayName  String
  twitchId     String      @unique
  isSubscriber Boolean     @default(false) // will always get from client calls upon rendering so it's always in sync
  isFollower   Boolean     @default(false) // will always get from client calls upon rendering so it's always in sync
  // Current twitchUser will always be compared to /follows and /subscriptions/user responses when these refetched
  // so when someone starts following an update is triggered on the next rerender.
  role         Role        @default(USER)
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @default(now()) @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime?   @db.Timestamptz(3)
  posts        Post[]
  likedPosts   LikedPost[]
  savedPosts   SavedPost[]
}

model Post {
  id          Int            @id @default(autoincrement())
  pinned      Boolean        @default(false)
  userId      Int
  title       String
  // message embed content to show in modal when post is clicked as is,
  // coming from generated discord message embed (if the POST message response does not include the
  // final embed, then as soon as message is posted launch a lambda that waits for a bit (maybe use supabase's)
  // and update the post with the generated embed)
  // much easier alternative: store discord message id here and fetch content individually (i.e. every time a post is clicked,
  // since content is NOT showed on the home page). this won't be too hard on the discord api.
  content     String
  link        String // store link in case discord is gone. We only care about this in the end
  isModerated Boolean        @default(false)
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @default(now()) @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime?      @db.Timestamptz(3)
  categories  PostCategory[]
  LikedPost   LikedPost[]
  SavedPost   SavedPost[]
  User        User           @relation(fields: [userId], references: [id])

  @@index([categories], type: Gin) // filter "My posts"
}

model LikedPost {
  postId Int
  userId Int
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId]) // post likes count
  @@index([userId]) // filter "My posts"
}

model SavedPost {
  postId Int
  userId Int
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId]) // post likes count
  @@index([userId]) // filter "Saved posts"
}
