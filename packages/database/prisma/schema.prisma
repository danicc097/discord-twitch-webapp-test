// prisma data proxy shouldn't be needed with supabase pgbouncer
// if for some obscure reason it doesn't work right disable pgbouncer and setup data proxy

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "multiSchema"]
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // see supabase to replicate the schema they're stored in
  extensions        = [uuidOSSP(schema: "extensions", map: "uuid-ossp"), pg_trgm(schema: "extensions")]
  schemas           = ["public", "extensions"]
}

enum PostCategory {
  RANA
  SIN_SONIDO
  MEME_ARTESANAL
  NO_SE_YO
  ORO
  DIAMANTE

  @@schema("public")
}

enum Role {
  USER
  ADMIN
  MODERATOR

  @@schema("public")
}

enum UserAward {
  ARTESANO_MEMIFICADOR

  @@schema("public")
}

// IMPORTANT: https://www.prisma.io/docs/guides/database/production-troubleshooting
// A migration might fail if:
//     - You modify a migration before running it and introduce a syntax error
//     - You add a mandatory (NOT NULL) column to a table that already has data
// To add a new mandatory value, leave model value as mandatory and then once the migration is
// generated locally update it to be multiple steps, e.g.
// ALTER TABLE "public"."User" ADD COLUMN "dummyField" TEXT;
// UPDATE "User" SET "dummyField" = 'dummy-default';
// ALTER TABLE "public"."User" ALTER COLUMN "dummyField" SET NOT NULL;

// manual indexes and partial indexes, track
// https://github.com/prisma/prisma/issues/16658
// https://github.com/prisma/prisma/issues/3076

model User {
  id           String      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  displayName  String
  profileImage String? // bad idea to use twitch images directly, could contain offensive content if user changes it right before stream
  twitchId     String      @unique
  isSubscriber Boolean     @default(false) // will always get from client calls upon rendering so it's always in sync
  isFollower   Boolean     @default(false) // will always get from client calls upon rendering so it's always in sync
  // Current twitchUser will always be compared to /follows and /subscriptions/user responses when these refetched
  // so when someone starts following an update is triggered on the next rerender.
  role         Role        @default(USER)
  awards       UserAward[] @default([])
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @default(now()) @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime?   @db.Timestamptz(3)
  posts        Post[]
  likedPosts   LikedPost[]
  savedPosts   SavedPost[]

  @@schema("public")
}

model Post {
  id          Int            @id @default(autoincrement())
  pinned      Boolean        @default(false)
  userId      String         @db.Uuid
  title       String
  // discordMessageId String? // zero value added
  content     String? // if null, use link
  link        String // store link in case discord is gone. We only care about this in the end
  isModerated Boolean        @default(false)
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime       @default(now()) @updatedAt @db.Timestamptz(3)
  categories  PostCategory[]
  likedPost   LikedPost[]
  savedPost   SavedPost[]
  User        User           @relation(fields: [userId], references: [id])

  textsearchable_index_col Unsupported("tsvector")? @default(dbgenerated("''::tsvector"))

  @@index([textsearchable_index_col], type: Gin)
  // TODO when prisma allows manual indexes or specific postgres extension indexes switch to GIN btree
  @@index([userId, isModerated, categories, createdAt(sort: Desc)], type: BTree) // filter "My posts"
  @@schema("public")
}

model LikedPost {
  postId Int
  userId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  // composite pk index is enough for the first column (userId) // @@index([userId]) // filter "My posts"
  @@index([postId]) // post likes count
  @@schema("public")
}

model SavedPost {
  postId Int
  userId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  // composite pk index is enough for the first column (userId) // @@index([userId]) // filter "Saved posts"
  @@index([postId]) // post likes count
  @@schema("public")
}
